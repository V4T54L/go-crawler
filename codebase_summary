{
  "Dockerfile": "- File Path: Dockerfile\n- High-Level Purpose: Provides instructions for building a multi-stage Docker image for the `crawler-service` Go application.\n- Definitions in the File:\n  - Variables / Constants:\n    - `builder` (alias): Name for the first build stage using `golang:1.21-alpine`.\n    - `WORKDIR /app`: Sets the working directory inside the builder container.\n    - `CGO_ENABLED=0 GOOS=linux`: Environment variables for cross-compilation.\n    - `WORKDIR /root/`: Sets the working directory in the final `alpine:latest` image.\n    - `EXPOSE 8080`: Declares that the container listens on port 8080.\n  - Notable Patterns or Logic:\n    - Multi-stage build: Separates the build environment from the final runtime environment to create a smaller image.\n",
  "Makefile": "- File Path: Makefile\n- High-Level Purpose: Defines common build, run, and dependency management commands for the Go application.\n- Definitions in the File:\n  - Functions / Methods:\n    - `build`: Builds the Go application binary `crawler-service` and places it in `./bin`.\n    - `run`: Executes the compiled `crawler-service` binary.\n    - `tidy`: Runs `go mod tidy` to clean up Go module dependencies.\n",
  "cmd/api/main.go": "- File Path: cmd/api/main.go\n- High-Level Purpose: The main entry point for the `crawler-service` API application.\n- Definitions in the File:\n  - Functions / Methods:\n    - `main()`: Internal function that serves as the application's entry point. It initializes the global logger and logs a starting message. It also contains a `TODO` for further service initialization.\n",
  "go.mod": "- File Path: go.mod\n- High-Level Purpose: Defines the Go module path and lists direct and indirect external dependencies required by the `crawler-service` application, along with the Go language version.\n- Definitions in the File:\n  - Variables / Constants:\n    - `module github.com/user/crawler-service`: Specifies the module's import path.\n    - `go 1.21`: Indicates the minimum Go language version required.\n    - `require`: Lists Go module dependencies.\n      - Direct dependencies: `github.com/jackc/pgx/v5 v5.5.5` (PostgreSQL driver), `github.com/redis/go-redis/v9 v9.5.1` (Redis client).\n      - Indirect dependencies: Various packages supporting the direct dependencies, such as `github.com/cespare/xxhash/v2`, `github.com/dgryski/go-rendezvous`, `github.com/jackc/pgpassfile`, `github.com/jackc/pgservicefile`, `github.com/jackc/puddle/v2`, `golang.org/x/crypto`, `golang.org/x/sync`, `golang.org/x/text`.\n",
  "internal/adapter/postgres/extracted_data_impl.go": "- File Path: internal/adapter/postgres/extracted_data_impl.go\n- High-Level Purpose: Provides a concrete implementation for storing and retrieving `ExtractedData` entities in a PostgreSQL database.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `ExtractedDataRepoImpl`: Struct that implements the `ExtractedDataRepository` interface, holding a `pgxpool.Pool` database connection.\n      - Fields: `db` (*pgxpool.Pool).\n  - Functions / Methods:\n    - `NewExtractedDataRepo(db *pgxpool.Pool) *ExtractedDataRepoImpl`: Public constructor function. Creates and returns a new instance of `ExtractedDataRepoImpl`.\n    - `Save(ctx context.Context, data *entity.ExtractedData) error`: Public method on `ExtractedDataRepoImpl`. Inserts or updates an `entity.ExtractedData` record in the `extracted_data` table. It marshals the `Images` field to JSON before saving and uses `ON CONFLICT (url) DO UPDATE` for upsert functionality.\n    - `FindByURL(ctx context.Context, url string) (*entity.ExtractedData, error)`: Public method on `ExtractedDataRepoImpl`. Retrieves an `entity.ExtractedData` record from the `extracted_data` table based on the provided URL. It unmarshals the `images` JSON column back into the `entity.ImageInfo` slice.\n",
  "internal/adapter/postgres/failed_url_impl.go": "- File Path: internal/adapter/postgres/failed_url_impl.go\n- High-Level Purpose: Provides a concrete implementation for managing `FailedURL` entities in a PostgreSQL database, including saving, updating, retrieving retryable URLs, and deleting records.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `FailedURLRepoImpl`: Struct that implements the `FailedURLRepository` interface, holding a `pgxpool.Pool` database connection.\n      - Fields: `db` (*pgxpool.Pool).\n  - Functions / Methods:\n    - `NewFailedURLRepo(db *pgxpool.Pool) *FailedURLRepoImpl`: Public constructor function. Creates and returns a new instance of `FailedURLRepoImpl`.\n    - `SaveOrUpdate(ctx context.Context, failedURL *entity.FailedURL) error`: Public method on `FailedURLRepoImpl`. Inserts a new `entity.FailedURL` record or updates an existing one based on the URL. On update, it increments the `retry_count` and updates other fields.\n    - `FindRetryable(ctx context.Context, limit int) ([]*entity.FailedURL, error)`: Public method on `FailedURLRepoImpl`. Retrieves a batch of `entity.FailedURL` records that are scheduled for a retry (i.e., `next_retry_at` is in the past or present), ordered by `next_retry_at`.\n    - `Delete(ctx context.Context, url string) error`: Public method on `FailedURLRepoImpl`. Deletes a `failed_urls` record from the database for a given URL.\n",
  "internal/adapter/redis/queue_impl.go": "- File Path: internal/adapter/redis/queue_impl.go\n- High-Level Purpose: Implements the `QueueRepository` interface using Redis Lists, providing a FIFO queue for managing URLs to be crawled.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `QueueRepoImpl`: Struct that implements the `QueueRepository` interface, holding a `redis.Client` instance.\n      - Fields: `client` (*redis.Client).\n  - Functions / Methods:\n    - `NewQueueRepo(client *redis.Client) *QueueRepoImpl`: Public constructor function. Creates and returns a new instance of `QueueRepoImpl`.\n    - `Push(ctx context.Context, url string) error`: Public method on `QueueRepoImpl`. Adds a URL to the left side of the Redis list, effectively pushing it onto the queue.\n    - `Pop(ctx context.Context) (string, error)`: Public method on `QueueRepoImpl`. Removes and returns a URL from the right side of the Redis list, effectively popping it from the queue. Returns `redis.Nil` if the queue is empty.\n    - `Size(ctx context.Context) (int64, error)`: Public method on `QueueRepoImpl`. Returns the current number of elements in the Redis list (queue).\n  - Variables / Constants:\n    - `crawlQueueKey` (string): Constant string \"crawler:queue\" used as the key for the Redis list representing the crawl queue.\n",
  "internal/adapter/redis/visited_impl.go": "- File Path: internal/adapter/redis/visited_impl.go\n- High-Level Purpose: Implements the `VisitedRepository` interface using Redis, providing mechanisms for URL deduplication by marking and checking visited URLs.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `VisitedRepoImpl`: Struct that implements the `VisitedRepository` interface, holding a `redis.Client` instance.\n      - Fields: `client` (*redis.Client).\n  - Functions / Methods:\n    - `NewVisitedRepo(client *redis.Client) *VisitedRepoImpl`: Public constructor function. Creates and returns a new instance of `VisitedRepoImpl`.\n    - `generateKey(url string) string`: Internal method on `VisitedRepoImpl`. Generates a consistent Redis key for a given URL by hashing it and prepending a constant prefix.\n    - `MarkVisited(ctx context.Context, url string, expiry time.Duration) error`: Public method on `VisitedRepoImpl`. Marks a URL as visited in Redis by setting a key with a specified expiry time.\n    - `IsVisited(ctx context.Context, url string) (bool, error)`: Public method on `VisitedRepoImpl`. Checks if a URL has been marked as visited in Redis.\n    - `RemoveVisited(ctx context.Context, url string) error`: Public method on `VisitedRepoImpl`. Deletes the Redis key associated with a URL, effectively removing it from the visited set.\n  - Variables / Constants:\n    - `visitedURLPrefix` (string): Constant string \"visited:\" used as a prefix for Redis keys.\n",
  "internal/entity/extracted_data.go": "- File Path: internal/entity/extracted_data.go\n- High-Level Purpose: Defines Go data structures (structs) that represent the entities related to extracted web page content, mirroring the `extracted_data` database table.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `ImageInfo`: Struct representing details of an image found on a page.\n      - Fields: `Src` (string), `Alt` (string), `DataSrc` (string, optional for lazy-loaded images).\n    - `ExtractedData`: Struct representing a complete record of data extracted from a crawled URL.\n      - Fields: `ID` (int64), `URL` (string), `Title` (string), `Description` (string), `Keywords` ([]string), `H1Tags` ([]string), `Content` (string), `Images` ([]ImageInfo), `CrawlTimestamp` (time.Time), `HTTPStatusCode` (int), `ResponseTimeMS` (int).\n",
  "internal/entity/failed_url.go": "- File Path: internal/entity/failed_url.go\n- High-Level Purpose: Defines a Go data structure (struct) that represents the entity for URLs that failed processing, mirroring the `failed_urls` database table.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `FailedURL`: Struct representing a record of a URL that failed to be processed.\n      - Fields: `ID` (int64), `URL` (string), `FailureReason` (string), `HTTPStatusCode` (int), `LastAttemptTimestamp` (time.Time), `RetryCount` (int), `NextRetryAt` (time.Time).",
  "internal/repository/extracted_data_repo.go": "- File Path: internal/repository/extracted_data_repo.go\n- High-Level Purpose: Defines the interface for a repository responsible for storing and retrieving extracted web page data.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `ExtractedDataRepository`: Interface defining the contract for operations related to extracted web page data.\n      - Methods:\n        - `Save(ctx context.Context, data *entity.ExtractedData) error`: Stores or updates extracted data for a URL.\n        - `FindByURL(ctx context.Context, url string) (*entity.ExtractedData, error)`: Retrieves extracted data for a specific URL.",
  "internal/repository/failed_url_repo.go": "- File Path: internal/repository/failed_url_repo.go\n- High-Level Purpose: Defines the interface for a repository that manages URLs which failed to be crawled, including operations for persistence, retrieval of retryable URLs, and deletion.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `FailedURLRepository`: Interface defining the contract for operations related to failed URLs.\n      - Methods:\n        - `SaveOrUpdate(ctx context.Context, failedURL *entity.FailedURL) error`: Creates or updates a record for a failed URL.\n        - `FindRetryable(ctx context.Context, limit int) ([]*entity.FailedURL, error)`: Retrieves a batch of URLs that are due for a retry.\n        - `Delete(ctx context.Context, url string) error`: Removes a failed URL record.\n",
  "internal/repository/queue_repo.go": "- File Path: internal/repository/queue_repo.go\n- High-Level Purpose: Defines the interface for a generic FIFO queue repository, specifically for managing URLs that are awaiting processing.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `QueueRepository`: Interface defining the contract for basic queue operations.\n      - Methods:\n        - `Push(ctx context.Context, url string) error`: Adds an item (URL) to the queue.\n        - `Pop(ctx context.Context) (string, error)`: Removes and returns an item (URL) from the queue.\n        - `Size(ctx context.Context) (int64, error)`: Returns the current number of items in the queue.\n",
  "internal/repository/visited_repo.go": "- File Path: internal/repository/visited_repo.go\n- High-Level Purpose: Defines the interface for a repository that manages the state of visited URLs, primarily for deduplication purposes in a web crawling context.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `VisitedRepository`: Interface defining the contract for operations related to visited URLs.\n      - Methods:\n        - `MarkVisited(ctx context.Context, url string, expiry time.Duration) error`: Marks a URL as visited with a given expiration.\n        - `IsVisited(ctx context.Context, url string) (bool, error)`: Checks if a URL has been previously marked as visited.\n        - `RemoveVisited(ctx context.Context, url string) error`: Removes a URL from the visited set.\n",
  "pkg/config/config.go": "- File Path: pkg/config/config.go\n- High-Level Purpose: Provides functionality to load and manage application configuration settings from environment variables, with sensible default values.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `Config`: Struct holding all application configuration parameters.\n      - Fields: `ServerPort` (string), `LogLevel` (string), `PostgresHost` (string), `PostgresPort` (string), `PostgresUser` (string), `PostgresPassword` (string), `PostgresDB` (string), `RedisAddr` (string), `RedisPassword` (string), `RedisDB` (int), `MaxConcurrency` (int), `PageLoadTimeout` (time.Duration).\n  - Functions / Methods:\n    - `Load() *Config`: Public function that loads configuration values from environment variables (e.g., `SERVER_PORT`, `POSTGRES_HOST`) and returns a `Config` struct. Provides default values if environment variables are not set.\n    - `getEnv(key, fallback string) string`: Internal helper function to retrieve an environment variable's string value or a fallback.\n    - `getEnvAsInt(key string, fallback int) int`: Internal helper function to retrieve an environment variable's integer value or a fallback.\n    - `getEnvAsDuration(key string, fallback int) time.Duration`: Internal helper function to retrieve an environment variable's integer value and convert it to a `time.Duration` (assuming seconds), or a fallback.\n",
  "pkg/logger/logger.go": "- File Path: pkg/logger/logger.go\n- High-Level Purpose: Provides a utility function to initialize and configure the global structured logger (`slog`).\n- Definitions in the File:\n  - Functions / Methods:\n    - `Init(writer io.Writer, level slog.Level)`: Public function that initializes the default `slog` logger. It configures a JSON handler, sets the logging level, and customizes attribute keys (e.g., `time` to `timestamp`, `level` to `level`, `msg` to `message`).\n",
  "pkg/utils/url.go": "- File Path: pkg/utils/url.go\n- High-Level Purpose: Contains utility functions for URL manipulation, specifically for hashing URLs and converting relative URLs to absolute ones.\n- Definitions in the File:\n  - Functions / Methods:\n    - `HashURL(rawURL string) string`: Public function that generates a SHA256 hash of a given URL string, useful for creating consistent keys.\n    - `ToAbsoluteURL(base *url.URL, relative string) (string, error)`: Public function that converts a relative URL string into an absolute URL string, given a base URL.\n",
  "schema/001_init.sql": "- File Path: schema/001_init.sql\n- High-Level Purpose: Defines the initial database schema for the `crawler-service`, including tables for storing extracted web data and tracking failed URL attempts.\n- Definitions in the File:\n  - Tables:\n    - `extracted_data`: Stores detailed information extracted from crawled web pages.\n      - Fields: `id` (BIGSERIAL PK), `url` (TEXT UNIQUE), `title` (TEXT), `description` (TEXT), `keywords` (TEXT[]), `h1_tags` (TEXT[]), `content` (TEXT), `images` (JSONB), `crawl_timestamp` (TIMESTAMPTZ DEFAULT NOW()), `http_status_code` (INT), `response_time_ms` (INT).\n    - `failed_urls`: Stores information about URLs that failed processing, including reasons and retry attempts.\n      - Fields: `id` (BIGSERIAL PK), `url` (TEXT UNIQUE), `failure_reason` (TEXT), `http_status_code` (INT), `last_attempt_timestamp` (TIMESTAMPTZ DEFAULT NOW()), `retry_count` (INT DEFAULT 0), `next_retry_at` (TIMESTAMPTZ).\n  - Indexes:\n    - `idx_extracted_data_url` on `extracted_data(url)`.\n    - `idx_extracted_data_crawl_timestamp` on `extracted_data(crawl_timestamp)`.\n    - `idx_failed_urls_url` on `failed_urls(url)`.\n    - `idx_failed_urls_next_retry_at` on `failed_urls(next_retry_at)`.\n"
}